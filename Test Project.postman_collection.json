{
	"info": {
		"_postman_id": "bf5eae2a-b7f3-45bf-8daf-2a5bade601ba",
		"name": "Test Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30314300"
	},
	"item": [
		{
			"name": "getTrips",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code should be 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Response should be an array and json', function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').but.not.an('object');\r",
							"});\r",
							"\r",
							"pm.test('Response should contain all correct values', function () {\r",
							"    const response = pm.response.json();\r",
							"    response.forEach(singleObject => {\r",
							"        pm.expect(singleObject).to.have.property('id').and.to.be.a('number');\r",
							"        pm.expect(singleObject).to.have.property('title').and.to.be.a('string');\r",
							"        pm.expect(singleObject).to.have.property('description').and.to.be.a('string');\r",
							"        pm.expect(singleObject).to.have.property('startTrip').and.to.be.a('string');\r",
							"        pm.expect(singleObject).to.have.property('endTrip').and.to.be.a('string');\r",
							"        pm.expect(singleObject).to.have.property('meetings').and.to.be.an('array');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test('Response startTrip and endTrip should contain a Date', function () {\r",
							"    pm.response.json().forEach(trip => {\r",
							"        pm.expect(trip.startTrip).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\r",
							"        pm.expect(trip.endTrip).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Meetings should contain objects\", function(){\r",
							"    pm.response.json().forEach((trip) => {\r",
							"        trip.meetings.forEach((meeting) => { \r",
							"            pm.expect(meeting).to.be.an(\"object\").and.not.an(\"array\");\r",
							"            pm.expect(meeting).to.have.property(\"id\").and.to.be.a(\"number\");\r",
							"            pm.expect(meeting).to.have.property(\"title\").and.to.be.a(\"string\");\r",
							"            pm.expect(meeting).to.have.property(\"description\").and.to.be.a(\"string\");\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3001/trips",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips"
					]
				}
			},
			"response": []
		},
		{
			"name": "getTrip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response should have status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be json\", function () {\r",
							"    jsonData;\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an object and not an array\", function(){\r",
							"    pm.expect(jsonData).to.be.an(\"object\").and.not.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain all correct values\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData).to.have.property(\"description\");\r",
							"    pm.expect(jsonData).to.have.property(\"startTrip\");\r",
							"    pm.expect(jsonData).to.have.property(\"endTrip\");\r",
							"    pm.expect(jsonData).to.have.property(\"meetings\");\r",
							"});\r",
							"\r",
							"pm.test(\"StartTrip and endTrip should be dates\", function () { //this fails cause no dates are saved but array of numbers\r",
							"    pm.expect(jsonData.startTrip).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\r",
							"    pm.expect(jsonData.endTrip).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\r",
							"});\r",
							"\r",
							"pm.test(\"Meetings should contain objects\", function(){\r",
							"    jsonData.meetings.forEach((meeting) => {\r",
							"        pm.expect(meeting).to.be.an(\"object\").and.not.an(\"array\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Meetings should contain correct values\", function () {\r",
							"    jsonData.meetings.forEach((meeting) => {\r",
							"        pm.expect(meeting).to.have.property(\"id\").and.to.be.a(\"number\");\r",
							"        pm.expect(meeting).to.have.property(\"title\").and.to.be.a(\"string\");\r",
							"        pm.expect(meeting).to.have.property(\"description\").and.to.be.a(\"string\");\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3001/trips/1",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "postTrip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"An Id is generated\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('id').and.to.be.a('number');\r",
							"})\r",
							"\r",
							"pm.test(\"Response is an object\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').and.not.an('array');\r",
							"})\r",
							"\r",
							"pm.test(\"Request and response bodies match\", function () {\r",
							"    const requestBody = JSON.parse(pm.request.body.raw);\r",
							"    const responseBody = pm.response.json();\r",
							"    delete responseBody.id;\r",
							"    pm.expect(requestBody).to.eql(responseBody);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain all values correctly\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"    pm.expect(pm.response.json()).to.have.property('title').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('description').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('startTrip').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('endTrip').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('meetings').that.is.an('array');\r",
							"    pm.response.json().meetings.forEach((meeting) => {\r",
							"     pm.expect(meeting).to.have.property('id').that.is.a('number');\r",
							"     pm.expect(meeting).to.have.property('title').that.is.a('string');\r",
							"     pm.expect(meeting).to.have.property('description').that.is.a('string');\r",
							"    });\r",
							"    pm.expect(pm.response.json()).to.have.property('id').that.is.a('number');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"title\": \"BT04\",\r\n      \"description\": \"San Mateo City Halley on Docker/IOT/Client\",\r\n      \"startTrip\": \"2023-12-13T09:00:00\",\r\n      \"endTrip\": \"2023-12-15T16:56:00\",\r\n      \"meetings\": [\r\n        {\r\n          \"id\": 6,\r\n          \"title\": \"One Conference\",\r\n          \"description\": \"Key Note on One Conference\"\r\n        }\r\n      ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3001/trips",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips"
					]
				}
			},
			"response": []
		},
		{
			"name": "putTrip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has code 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain all values correctly\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"    pm.expect(pm.response.json()).to.have.property('title').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('description').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('startTrip').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('endTrip').that.is.a('string');\r",
							"    pm.expect(pm.response.json()).to.have.property('meetings').that.is.an('array');\r",
							"    pm.response.json().meetings.forEach((meeting) => {\r",
							"     pm.expect(meeting).to.have.property('id').that.is.a('number');\r",
							"     pm.expect(meeting).to.have.property('title').that.is.a('string');\r",
							"     pm.expect(meeting).to.have.property('description').that.is.a('string');\r",
							"    });\r",
							"    pm.expect(pm.response.json()).to.have.property('id').that.is.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is json\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n      \"title\": \"BT02\",\r\n      \"description\": \"Santa Clara Halley on new Server/IOT/Client\",\r\n      \"startTrip\": \"2021-06-23T09:00:00\",\r\n      \"endTrip\": \"2021-06-27T16:56:00\",\r\n      \"meetings\": [\r\n        {\r\n          \"id\": 3,\r\n          \"title\": \"One Conference\",\r\n          \"description\": \"HandsOn on One Conference\"\r\n        },\r\n        {\r\n          \"id\": 4,\r\n          \"title\": \"One Conference\",\r\n          \"description\": \"Key Note on One Conference\"\r\n        }\r\n      ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3001/trips/1",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteTrip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response has correct status code', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is empty json object\", function (){\r",
							"    pm.expect(pm.response.json()).to.eql({});\r",
							"});\r",
							"\r",
							"pm.test(\"Can no longer get\", function(){\r",
							"    pm.sendRequest(\"GET\", \"http://localhost:3001/trips/3\", function (err, res) {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:3001/trips/5",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"trips",
						"5"
					]
				}
			},
			"response": []
		}
	]
}